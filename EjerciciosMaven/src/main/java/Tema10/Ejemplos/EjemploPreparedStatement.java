package Tema10.Ejemplos;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author macarena
 *
 */
public class EjemploPreparedStatement extends javax.swing.JFrame {

    private String url = "jdbc:mysql://localhost:3306/bd";

    public EjemploPreparedStatement() {
        initComponents();
        this.setTitle("Ejemplo PreparedStatement");
        this.setSize(new Dimension(500, 300)); //tamaño de la ventana
        this.setLocationRelativeTo(null); //para colocar la ventana al centro de la pantalla
    }

    public String getUrl() {
        return url;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuSQL = new javax.swing.JMenu();
        itemInsercion = new javax.swing.JMenuItem();
        itemBorrado = new javax.swing.JMenuItem();
        itemActualizacion = new javax.swing.JMenuItem();
        itemMostrar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        menuSQL.setText("SQL");

        itemInsercion.setText("Inserción");
        itemInsercion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemInsercionActionPerformed(evt);
            }
        });
        menuSQL.add(itemInsercion);

        itemBorrado.setText("Borrado");
        itemBorrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemBorradoActionPerformed(evt);
            }
        });
        menuSQL.add(itemBorrado);

        itemActualizacion.setText("Actualización");
        itemActualizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemActualizacionActionPerformed(evt);
            }
        });
        menuSQL.add(itemActualizacion);

        itemMostrar.setText("Recuperar datos ...");
        itemMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMostrarActionPerformed(evt);
            }
        });
        menuSQL.add(itemMostrar);

        jMenuBar1.add(menuSQL);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * Inserción de una fila en la 'tabla' de la BD. Para ello se utiliza una
     * Statement >> observa la diferencia con PreparedStatement
     *
     * No se da valor a la clave de la tabla, ya que en la bd está definida autonumérica.
     * 
     */

    private void itemInsercionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemInsercionActionPerformed
        try ( Connection con = DriverManager.getConnection(url, "root", "");) {
            Statement st = con.createStatement();

            //Pediremos tantos datos como necesitemos
            String valor1 = JOptionPane.showInputDialog("Introduce valor: ");
            
            String sql = "INSERT INTO tabla(columna1) VALUES ('" + valor1 + "')";
            if (st.executeUpdate(sql) > 0) {
                JOptionPane.showMessageDialog(this, "Inserción realizada");
            } else {
                JOptionPane.showMessageDialog(this, "Error al insertar", null, JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_itemInsercionActionPerformed

    /**
     *
     * Borrado de una fila en la 'tabla' de la BD. Para ello se utiliza una
     * PreparedStatement >> observa la diferencia con Statement
     *
     * El borrado de la fila se reliza filtrando por clave (primary key) de la tabla.
     */
    private void itemBorradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemBorradoActionPerformed
        try ( Connection con = DriverManager.getConnection(url, "root", "");) {
            try ( PreparedStatement ps = con.prepareStatement("DELETE FROM tabla WHERE clave = ?");) {
                int pk = Integer.parseInt(JOptionPane.showInputDialog("Introduce clave de la fila a borrar: "));
                ps.setInt(1, pk);
                int numFilas = ps.executeUpdate();
                if(numFilas > 0) JOptionPane.showMessageDialog(this, "Se han eliminado " + numFilas + " fila/s.");
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_itemBorradoActionPerformed

    /**
     *
     * Actualización de una fila en la 'tabla' de la BD. Para ello se utiliza
     * una PreparedStatement >> observa la diferencia con Statement
     *
     * La consulta lo que hace es poner el valor '99' en todas aquellas filas en
     * las que la columna2 no tiene valor.
     */
    private void itemActualizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemActualizacionActionPerformed
        try ( Connection con = DriverManager.getConnection(url, "root", "");) {
            try ( PreparedStatement ps = con.prepareStatement("UPDATE tabla1 SET columna2=99 WHERE columna2 IS NULL");) {
                String sql = "UPDATE tabla1 SET columna2=? WHERE columna2 IS NULL";
                ps.setInt(1,99);
                int numFilas = ps.executeUpdate();
                if(numFilas > 0) JOptionPane.showMessageDialog(this, "Se han actualizado " + numFilas + " fila/s.");
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_itemActualizacionActionPerformed

    /**
     *
     * Recuperado de todos los datos de la 'tabla' de la BD. Para ello se
     * utiliza una Statement >> observa la diferencia con PreparedStatement
     *
     * Los resultados son visualizados por filas en el control JTextArea de la
     * ventana.
     */
    private void itemMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMostrarActionPerformed
        try ( Connection con = DriverManager.getConnection(url, "root", "");) {
            try ( Statement st = con.createStatement();) {
                String sql = "SELECT * FROM tabla";

                try ( ResultSet rs = st.executeQuery(sql);) {
                    while (rs.next()) {
                        this.jTextArea1.append(String.valueOf(rs.getInt("clave")) + "\t");
                        this.jTextArea1.append(String.valueOf(rs.getString("columna")) + "\t");
                        //...
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                con.rollback();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_itemMostrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EjemploPreparedStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EjemploPreparedStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EjemploPreparedStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EjemploPreparedStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EjemploPreparedStatement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemActualizacion;
    private javax.swing.JMenuItem itemBorrado;
    private javax.swing.JMenuItem itemInsercion;
    private javax.swing.JMenuItem itemMostrar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenu menuSQL;
    // End of variables declaration//GEN-END:variables
}
