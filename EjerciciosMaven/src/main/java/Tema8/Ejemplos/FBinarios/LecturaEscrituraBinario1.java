
package Tema8.Ejemplos.FBinarios;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author bladiaju
 */
public class LecturaEscrituraBinario1 extends javax.swing.JFrame {

    /**
     * Creates new form LecturaEscrituraBinario1
     */
    public LecturaEscrituraBinario1() {
        initComponents();
        
        this.setTitle("Lectura y escritura de un fichero binario");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_abrir = new javax.swing.JButton();
        btn_grabar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_abrir.setText("Abril");
        btn_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_abrirActionPerformed(evt);
            }
        });

        btn_grabar.setText("Grabal");
        btn_grabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_grabarActionPerformed(evt);
            }
        });

        resultado.setEditable(false);
        resultado.setColumns(20);
        resultado.setRows(5);
        jScrollPane1.setViewportView(resultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_abrir)
                        .addGap(40, 40, 40)
                        .addComponent(btn_grabar)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_abrir)
                    .addComponent(btn_grabar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_abrirActionPerformed
        
        // Lectura del contenido del fichero previamente generado
        File f = seleccionarFile("r"); // Seleccionamos el fichero donde grabar
        //abrimos fichero para lectura
        if(f == null) return;
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        DataInputStream dis = null;
        
        boolean eof;
        int cont = 0;
        try {
            //Apertura de fichero
            fis = new FileInputStream(f);
            bis = new BufferedInputStream(fis);
            dis =  new DataInputStream(bis);
            
            //Procesamiento del fichero
            Random gen = new Random();
            eof = false;
            while(!eof){
                this.resultado.append(dis.readDouble()+ "\n");
                cont++;
            }
            JOptionPane.showMessageDialog(this, "Proceso finalizado correctamente", "Grabacion Fichero", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error al abrir el fichero", "Grabacion Fichero", JOptionPane.ERROR_MESSAGE);
        }catch (EOFException ex){
            eof = true;
            this.resultado.append("\nTotal: " + cont);
            JOptionPane.showMessageDialog(this, "Fin lectura", "Grabacion Fichero", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al grabar en el fichero", "Grabacion Fichero", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                //Cierre de flujos
                dis.close();
                bis.close();
                fis.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al cerrar el fichero", "Grabacion Fichero", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
    }//GEN-LAST:event_btn_abrirActionPerformed

    private void btn_grabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_grabarActionPerformed
        // Grabamos en el fichero 100 n√∫meros aleatorios (double)
        File f = seleccionarFile("w"); // Seleccionamos el fichero donde grabar
        //abrimos fichero para escritura
        if(f == null) return;
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;
        DataOutputStream dos = null;
        
        try {
            //Apertura de fichero
            fos = new FileOutputStream(f, true);
            bos = new BufferedOutputStream(fos);
            dos =  new DataOutputStream(bos);
            
            //Procesamiento del fichero
            Random gen = new Random();
            for (int i = 0; i < 100; i++) {
                dos.writeDouble(gen.nextDouble());
            }
            JOptionPane.showMessageDialog(this, "Proceso finalizado correctamente", "Grabacion Fichero", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error al abrir el fichero", "Grabacion Fichero", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al grabar en el fichero", "Grabacion Fichero", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                //Cierre de flujos
                dos.close();
                bos.close();
                fos.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al cerrar el fichero", "Grabacion Fichero", JOptionPane.ERROR_MESSAGE);
            } 
        }
    }//GEN-LAST:event_btn_grabarActionPerformed
    
    public File seleccionarFile(String modo) {

        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Elije el directorio");
        File file = null; //referencia al archivo
        int resp = jfc.showDialog(this, (modo.equals("r")?"Abrir":"Cerrar"));
        if (resp == JFileChooser.APPROVE_OPTION) {
            file = jfc.getSelectedFile();
        }
        return file;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturaEscrituraBinario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturaEscrituraBinario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturaEscrituraBinario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturaEscrituraBinario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LecturaEscrituraBinario1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_abrir;
    private javax.swing.JButton btn_grabar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultado;
    // End of variables declaration//GEN-END:variables
}
